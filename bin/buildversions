#!/usr/bin/env python3
# creates versions of the tex file using a json file with templates
import sys
import json
from termcolor import colored

# utility functions

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def vprint(*args, **kwargs):
    if arg.v:
        print(*args, file=sys.stderr, **kwargs)

def error(message):
    eprint(colored("Error:",'red'),message)
    sys.exit(1)

# Parse arguments
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("basefile" , help = "the name of the base tex file")
parser.add_argument("versionfile" , help = "the name of the json file with version info")
parser.add_argument("-e" , action = "store_true", help = "output the list of versions (for use in Makefile)")
parser.add_argument("-v" , action = "store_true", help = "verbose output")
arg = parser.parse_args()
if arg.e:
    arg.v = False

# remove suffixes from input file names
basefile      = arg.basefile.split('.')[0]
versionfile   = arg.versionfile.split('.')[0]

# reading the version file
try:
    filename = versionfile+'.json'
    vprint(colored("Reading the version file:  ",'green'),filename)
    with open(filename, 'r') as f:
        versions = json.load(f)
except IOError:
    error("Could not read file: "+filename)

if arg.e:
    print(' '.join([*versions]))
    sys.exit(0)


# reading the base file
try:
    filename = basefile+'.tex'
    vprint(colored("Reading the base file:  ",'green'),filename)
    with open(filename, 'r') as f:
        basesource = str(f.read())
except IOError:
    error("Could not read file: "+filename)

# output prefixed files
for name , prefix in versions.items():
    try:
        filename = basefile+'_'+name+".tex"
        vprint(colored('Creating file: ','magenta'),filename)
        with open(filename, 'w') as f:
            f.write(prefix+"\n"+basesource)
    except IOError:
        error("Could not write to file: "+filename)
